version: '3.8'

services:
  # Integration Service API (Development)
  integration-api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: integration-api-dev
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/universal_ai_cs_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=development-jwt-secret-key
      - LOG_LEVEL=debug
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=http://localhost:3003/auth/google/callback
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET}
      - MICROSOFT_REDIRECT_URI=http://localhost:3003/auth/microsoft/callback
      - WEBHOOK_SECRET=development-webhook-secret
      - WEBHOOK_BASE_URL=http://localhost:3003/webhooks
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - integration-network

  # Integration Service Worker (Development)
  integration-worker:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: integration-worker-dev
    command: ["npm", "run", "dev:worker"]
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/universal_ai_cs_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=development-jwt-secret-key
      - LOG_LEVEL=debug
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET}
      - WEBHOOK_SECRET=development-webhook-secret
      - QUEUE_CONCURRENCY=2
      - QUEUE_MAX_ATTEMPTS=3
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - integration-network

  # PostgreSQL Database (Development)
  postgres:
    image: postgres:15-alpine
    container_name: integration-postgres-dev
    environment:
      - POSTGRES_DB=universal_ai_cs_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - integration-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d universal_ai_cs_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Queue (Development)
  redis:
    image: redis:7-alpine
    container_name: integration-redis-dev
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - integration-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Commander (Development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: integration-redis-commander-dev
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - integration-network

  # pgAdmin (Development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: integration-pgadmin-dev
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "8080:80"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - integration-network

  # Mailhog (Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: integration-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    restart: unless-stopped
    networks:
      - integration-network

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  integration-network:
    driver: bridge
