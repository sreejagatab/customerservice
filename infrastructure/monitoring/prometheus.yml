# Prometheus Configuration
# Universal AI Customer Service Platform Monitoring

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'universal-ai-platform'
    environment: 'production'

rule_files:
  - "rules/*.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # Node Exporter
  - job_name: 'node-exporter'
    kubernetes_sd_configs:
      - role: node
    relabel_configs:
      - source_labels: [__address__]
        regex: '(.*):10250'
        target_label: __address__
        replacement: '${1}:9100'
      - source_labels: [__meta_kubernetes_node_label_kubernetes_io_hostname]
        target_label: instance

  # Kubernetes API Server
  - job_name: 'kubernetes-apiservers'
    kubernetes_sd_configs:
      - role: endpoints
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

  # Kubernetes Nodes
  - job_name: 'kubernetes-nodes'
    kubernetes_sd_configs:
      - role: node
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics

  # Kubernetes Pods
  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

  # Message Service
  - job_name: 'message-service'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - universal-ai-platform
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: message-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
    scrape_interval: 10s
    metrics_path: /metrics

  # AI Service
  - job_name: 'ai-service'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - universal-ai-platform
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: ai-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
    scrape_interval: 10s
    metrics_path: /metrics

  # Notification Service
  - job_name: 'notification-service'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - universal-ai-platform
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: notification-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
    scrape_interval: 10s
    metrics_path: /metrics

  # Admin Service
  - job_name: 'admin-service'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - universal-ai-platform
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: admin-service
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
    scrape_interval: 10s
    metrics_path: /metrics

  # PostgreSQL
  - job_name: 'postgres-exporter'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - universal-ai-platform
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: postgres-exporter
    scrape_interval: 30s

  # Redis
  - job_name: 'redis-exporter'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - universal-ai-platform
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: redis-exporter
    scrape_interval: 30s

  # RabbitMQ
  - job_name: 'rabbitmq'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - universal-ai-platform
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: rabbitmq
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: prometheus
    scrape_interval: 30s

  # NGINX Ingress Controller
  - job_name: 'nginx-ingress'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - ingress-nginx
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
        action: keep
        regex: ingress-nginx
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: (.+)
        replacement: $1:10254

  # Blackbox Exporter for external monitoring
  - job_name: 'blackbox'
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
        - https://api.universalai.com/health
        - https://app.universalai.com/health
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter:9115

  # Custom application metrics
  - job_name: 'custom-metrics'
    kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
            - universal-ai-platform
    relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name

# Recording rules for performance optimization
recording_rules:
  - name: platform.rules
    interval: 30s
    rules:
      # Request rate
      - record: platform:request_rate
        expr: sum(rate(http_requests_total[5m])) by (service, method, status)
      
      # Error rate
      - record: platform:error_rate
        expr: sum(rate(http_requests_total{status=~"5.."}[5m])) by (service) / sum(rate(http_requests_total[5m])) by (service)
      
      # Response time percentiles
      - record: platform:response_time_p95
        expr: histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (service, le))
      
      - record: platform:response_time_p99
        expr: histogram_quantile(0.99, sum(rate(http_request_duration_seconds_bucket[5m])) by (service, le))
      
      # Database connection pool usage
      - record: platform:db_pool_usage
        expr: (db_connections_active / db_connections_max) * 100
      
      # Cache hit rate
      - record: platform:cache_hit_rate
        expr: (redis_keyspace_hits / (redis_keyspace_hits + redis_keyspace_misses)) * 100
      
      # Queue length
      - record: platform:queue_length
        expr: sum(rabbitmq_queue_messages) by (queue)
      
      # CPU usage by service
      - record: platform:cpu_usage
        expr: sum(rate(container_cpu_usage_seconds_total[5m])) by (pod, container) * 100
      
      # Memory usage by service
      - record: platform:memory_usage
        expr: sum(container_memory_working_set_bytes) by (pod, container) / 1024 / 1024 / 1024
      
      # Disk usage
      - record: platform:disk_usage
        expr: (1 - (node_filesystem_avail_bytes / node_filesystem_size_bytes)) * 100
      
      # Network I/O
      - record: platform:network_receive_rate
        expr: sum(rate(node_network_receive_bytes_total[5m])) by (instance)
      
      - record: platform:network_transmit_rate
        expr: sum(rate(node_network_transmit_bytes_total[5m])) by (instance)

# Storage configuration
storage:
  tsdb:
    retention.time: 30d
    retention.size: 100GB
    wal-compression: true
  
# Remote write configuration for long-term storage
remote_write:
  - url: "https://prometheus-remote-write.universalai.com/api/v1/write"
    basic_auth:
      username: "prometheus"
      password_file: "/etc/prometheus/remote-write-password"
    queue_config:
      max_samples_per_send: 10000
      max_shards: 200
      capacity: 100000

# Remote read configuration
remote_read:
  - url: "https://prometheus-remote-read.universalai.com/api/v1/read"
    basic_auth:
      username: "prometheus"
      password_file: "/etc/prometheus/remote-read-password"
