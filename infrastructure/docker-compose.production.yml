# Production Docker Compose Configuration
# Universal AI Customer Service Platform - Production Deployment

version: '3.8'

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - api-gateway-1
      - api-gateway-2
    networks:
      - frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # API Gateway Instances (Load Balanced)
  api-gateway-1:
    image: universal-ai-cs/api-gateway:latest
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-primary:5432/universal_ai_cs
      - REDIS_URL=redis://redis-cluster:6379
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_MAX=1000
      - RATE_LIMIT_WINDOW_MS=900000
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - frontend
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'

  api-gateway-2:
    image: universal-ai-cs/api-gateway:latest
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-primary:5432/universal_ai_cs
      - REDIS_URL=redis://redis-cluster:6379
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_MAX=1000
      - RATE_LIMIT_WINDOW_MS=900000
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - frontend
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Message Service Instances
  message-service-1:
    image: universal-ai-cs/message-service:latest
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-primary:5432/universal_ai_cs
      - REDIS_URL=redis://redis-cluster:6379
      - QUEUE_CONCURRENCY=10
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '1'

  message-service-2:
    image: universal-ai-cs/message-service:latest
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-primary:5432/universal_ai_cs
      - REDIS_URL=redis://redis-cluster:6379
      - QUEUE_CONCURRENCY=10
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '1'

  # AI Service Instances
  ai-service-1:
    image: universal-ai-cs/ai-service:latest
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-primary:5432/universal_ai_cs
      - REDIS_URL=redis://redis-cluster:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - MAX_CONCURRENT_REQUESTS=50
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '4'
        reservations:
          memory: 2G
          cpus: '2'

  ai-service-2:
    image: universal-ai-cs/ai-service:latest
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-primary:5432/universal_ai_cs
      - REDIS_URL=redis://redis-cluster:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - MAX_CONCURRENT_REQUESTS=50
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '4'
        reservations:
          memory: 2G
          cpus: '2'

  # Integration Service
  integration-service:
    image: universal-ai-cs/integration-service:latest
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-primary:5432/universal_ai_cs
      - REDIS_URL=redis://redis-cluster:6379
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Workflow Service
  workflow-service:
    image: universal-ai-cs/workflow-service:latest
    environment:
      - NODE_ENV=production
      - PORT=3006
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-primary:5432/universal_ai_cs
      - REDIS_URL=redis://redis-cluster:6379
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Analytics Service
  analytics-service:
    image: universal-ai-cs/analytics-service:latest
    environment:
      - NODE_ENV=production
      - PORT=3008
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-primary:5432/universal_ai_cs
      - REDIS_URL=redis://redis-cluster:6379
    depends_on:
      - postgres-primary
      - redis-cluster
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '1'

  # Database - Primary
  postgres-primary:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=universal_ai_cs
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/init:/docker-entrypoint-initdb.d
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'

  # Database - Read Replica
  postgres-replica:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=universal_ai_cs
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGUSER=postgres
      - POSTGRES_PRIMARY_HOST=postgres-primary
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./postgres/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh
    depends_on:
      - postgres-primary
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'

  # Redis Cluster
  redis-cluster:
    image: redis:7-alpine
    command: redis-server --appendonly yes --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
      - backend
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - monitoring
    restart: unless-stopped

  # Log Aggregation - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - logging
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'

  # Log Processing - Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    networks:
      - logging
    restart: unless-stopped

  # Log Visualization - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - logging
    restart: unless-stopped

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  monitoring:
    driver: bridge
  logging:
    driver: bridge

volumes:
  postgres_data:
  postgres_replica_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
