version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: universal-ai-cs-postgres
    environment:
      POSTGRES_DB: universal_ai_cs
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - universal-ai-cs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d universal_ai_cs"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: universal-ai-cs-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - universal-ai-cs-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: universal-ai-cs-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - universal-ai-cs-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: universal-ai-cs-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - universal-ai-cs-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: universal-ai-cs-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - universal-ai-cs-network
    depends_on:
      - prometheus

  # Development Tools
  mailhog:
    image: mailhog/mailhog:latest
    container_name: universal-ai-cs-mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - universal-ai-cs-network

  # API Gateway (Development)
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile.dev
    container_name: universal-ai-cs-api-gateway
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:password@postgres:5432/universal_ai_cs
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    networks:
      - universal-ai-cs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # Auth Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile.dev
    container_name: universal-ai-cs-auth-service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:password@postgres:5432/universal_ai_cs
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
    volumes:
      - ./auth-service:/app
      - /app/node_modules
    networks:
      - universal-ai-cs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Integration Service
  integration-service:
    build:
      context: ./integration-service
      dockerfile: Dockerfile.dev
    container_name: universal-ai-cs-integration-service
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:password@postgres:5432/universal_ai_cs
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
    volumes:
      - ./integration-service:/app
      - /app/node_modules
    networks:
      - universal-ai-cs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # AI Service
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile.dev
    container_name: universal-ai-cs-ai-service
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:password@postgres:5432/universal_ai_cs
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY}
    volumes:
      - ./ai-service:/app
      - /app/node_modules
    networks:
      - universal-ai-cs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # Message Service
  message-service:
    build:
      context: ./message-service
      dockerfile: Dockerfile.dev
    container_name: universal-ai-cs-message-service
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:password@postgres:5432/universal_ai_cs
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
    volumes:
      - ./message-service:/app
      - /app/node_modules
    networks:
      - universal-ai-cs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # Frontend (React Admin Dashboard)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: universal-ai-cs-frontend
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: http://localhost:3000/api/v1
      VITE_WS_URL: ws://localhost:3000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - universal-ai-cs-network
    depends_on:
      - api-gateway
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  universal-ai-cs-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
